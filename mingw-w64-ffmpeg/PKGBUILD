# Maintainer: Alexey Pavlov <Alexpux@gmail.com>
# Contributor: Zach Bacon <11doctorwhocanada@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=ffmpeg-if
_variant=${FFMPEG_VARIANT:-shared}
pkgbase="mingw-w64-${_realname}"
if [[ "$_variant" == "shared-debug" ]]; then
  pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-debug")
elif [[ "$_variant" == "shared-bundled" ]]; then
  pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-bundled")
else
  pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
fi
pkgver=7.1
pkgrel=1
pkgdesc="Complete and free Internet live audio and video broadcasting solution (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url="https://ffmpeg.org/"
license=('LGPL')
options=('strip')
depends=("${MINGW_PACKAGE_PREFIX}-aom"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-dav1d"
         "${MINGW_PACKAGE_PREFIX}-fontconfig"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-fribidi"
         "${MINGW_PACKAGE_PREFIX}-gnutls"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-lame"
         "${MINGW_PACKAGE_PREFIX}-libass"
         "${MINGW_PACKAGE_PREFIX}-libbluray"
         "${MINGW_PACKAGE_PREFIX}-libcaca"
         "${MINGW_PACKAGE_PREFIX}-libiconv"
         "${MINGW_PACKAGE_PREFIX}-libjxl"
         "${MINGW_PACKAGE_PREFIX}-libmfx"
         "${MINGW_PACKAGE_PREFIX}-libmodplug"
         "${MINGW_PACKAGE_PREFIX}-libsoxr"
         "${MINGW_PACKAGE_PREFIX}-libtheora"
         "${MINGW_PACKAGE_PREFIX}-libvorbis"
         "${MINGW_PACKAGE_PREFIX}-libvpx"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-libxml2"
         "${MINGW_PACKAGE_PREFIX}-openal"
         "${MINGW_PACKAGE_PREFIX}-openjpeg2"
         "${MINGW_PACKAGE_PREFIX}-opus"
         "${MINGW_PACKAGE_PREFIX}-rtmpdump"
         "${MINGW_PACKAGE_PREFIX}-SDL2"
         "${MINGW_PACKAGE_PREFIX}-speex"
         "${MINGW_PACKAGE_PREFIX}-srt"
         "${MINGW_PACKAGE_PREFIX}-vulkan"
         "${MINGW_PACKAGE_PREFIX}-zimg"
         "${MINGW_PACKAGE_PREFIX}-zlib")

makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools"
             "${MINGW_PACKAGE_PREFIX}-pkgconf"
             "${MINGW_PACKAGE_PREFIX}-dlfcn"
             "${MINGW_PACKAGE_PREFIX}-vulkan-headers"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] || echo "${MINGW_PACKAGE_PREFIX}-amf-headers")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] || echo "${MINGW_PACKAGE_PREFIX}-ffnvcodec-headers")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] || echo "${MINGW_PACKAGE_PREFIX}-nasm")
             "${MINGW_PACKAGE_PREFIX}-ntldd-git"
             git
             diffutils
             patch
             make
             unzip)
source=("${_realname}"::"git+https://github.com/InitialForce/FFmpeg.git#branch=release/7.1")
validpgpkeys=('FCF986EA15E6E293A5644F10B4322F04D67658D8')
sha256sums=('SKIP')

prepare() {
  cd "${srcdir}/${_realname}"
  # FFmpeg 7.1 should not need the old patches that were required for 4.4.2
}

build() {
  # Fix using SRT headers
  CFLAGS+=" -DWIN32"
  CXXFLAGS+=" -DWIN32"
  LDFLAGS+=""

  local -a common_config
  common_config+=(
    --disable-gpl
    --enable-version3
    --disable-doc
    --enable-dxva2
    --enable-d3d11va
    --enable-d3d12va
    --enable-fontconfig
    --enable-gnutls
    --enable-iconv
    --enable-libaom
    --enable-libass
    --enable-libcaca
    --enable-libdav1d
    --enable-libfontconfig
    --enable-libfreetype
    --enable-libfribidi
    --enable-libharfbuzz
    --enable-libjxl
    --enable-libmfx
    --enable-libmodplug
    --enable-libmp3lame
    --enable-libopenjpeg
    --enable-libopus
    --enable-librtmp
    --enable-libsoxr
    --enable-libspeex
    --enable-libsrt
    --enable-libtheora
    --enable-libvorbis
    --enable-libvpx
    --enable-libwebp
    --enable-libxml2
    --enable-openal
    --enable-pic
    --enable-postproc
    --enable-runtime-cpudetect
    --enable-swresample
    --enable-vulkan
    --enable-libzimg
    --enable-zlib
    --enable-amf
    --enable-nvenc
    --build-suffix=-if
  )

  # Configure variant-specific options
  if [[ "$_variant" == "shared-debug" ]]; then
    common_config+=(--enable-shared --disable-stripping --disable-optimizations --extra-cflags=-Og --extra-cflags=-fno-omit-frame-pointer --enable-debug=3 --extra-cflags=-fno-inline)
  else
    common_config+=(--enable-shared --disable-debug --disable-stripping)
  fi

  [[ -d "${srcdir}/build-${MINGW_CHOST}" ]] && rm -rf "${srcdir}/build-${MINGW_CHOST}"
  mkdir -p "${srcdir}/build-${MINGW_CHOST}" && cd "${srcdir}/build-${MINGW_CHOST}"

  # Fix compiler detection for CLANG64 environment
  if [[ "${MINGW_PREFIX}" == "/clang64" ]]; then
    export CC="clang"
    export CXX="clang++"
  else
    export CC="gcc"
    export CXX="g++"
  fi

  # Debug: Print compiler info
  echo "MINGW_PREFIX=${MINGW_PREFIX}"
  echo "CC=${CC}"
  echo "CXX=${CXX}"
  echo "which \$CC: $(which ${CC})"
  echo "PATH=${PATH}"

  ../${_realname}/configure \
    --prefix=${MINGW_PREFIX} \
    --target-os=mingw32 \
    --arch=${CARCH%%-*} \
    --cc="${CC}" \
    --cxx="${CXX}" \
    "${common_config[@]}" \
    --logfile=config.log ||
    {
      cat config.log
      exit 1
    }
  make VERBOSE=1
}

check() {
  cd "${srcdir}/build-${MINGW_CHOST}"
  # workaround for conflict with SDL main(), use it if you have SDL installed
  # make check CC_C="-c -Umain"
  make check VERBOSE=1 || true
}

package() {
  cd "${srcdir}/build-${MINGW_CHOST}"
  make DESTDIR="${pkgdir}" install

  # Clean up
  rm -f ${pkgdir}/${MINGW_PREFIX}/lib/*.def
  rm -f ${pkgdir}/${MINGW_PREFIX}/bin/*.lib

  # Fix pkg-config files
  local PREFIX_DEPS=$(cygpath -am ${MINGW_PREFIX})
  find ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig -name *.pc -exec sed -i -e"s|${PREFIX_DEPS}|${MINGW_PREFIX}|g" {} \;

  # Variant-specific post-processing
  if [[ "$_variant" == "shared-debug" ]]; then
    # Convert symbols for debug variant
    wget "https://github.com/rainers/cv2pdb/releases/download/v0.49/cv2pdb-0.49.zip"
    mkdir cv2pdb
    unzip "cv2pdb-0.49.zip" -d cv2pdb
    pushd "${pkgdir}${MINGW_PREFIX}"/bin/
    for file in *.dll; do $OLDPWD/cv2pdb/cv2pdb.exe $file; done
    popd
    rm -rf cv2pdb*
  elif [[ "$_variant" == "shared-bundled" ]]; then
    # Collect dependencies for bundled variant
    pushd "${pkgdir}${MINGW_PREFIX}"/bin/
    echo "=== Collecting dependencies for bundled variant ==="
    echo "Files in bin directory:"
    ls -la *.dll *.exe 2>/dev/null || echo "No DLL/EXE files found"

    # Check if ntldd exists and works
    if command -v ntldd >/dev/null 2>&1; then
      echo "Running ntldd to find dependencies..."
      echo "Raw ntldd output (first 20 lines):"
      ntldd -R *.dll *.exe 2>/dev/null | head -20

      # Try with MINGW_PREFIX filter first
      deps=$(ntldd -R *.dll *.exe 2>/dev/null | grep -v WINDOWS | grep -v "not found" | grep "${MINGW_PREFIX}" | awk '{print $3}' | sort | uniq)

      if [[ -n "$deps" ]]; then
        echo "Found dependencies with MINGW_PREFIX filter:"
        echo "$deps"

        # Copy each dependency
        while IFS= read -r dep; do
          if [[ -f "$dep" ]]; then
            echo "Copying: $dep"
            cp -u "$dep" . || echo "Failed to copy $dep"
          else
            echo "Dependency not found: $dep"
          fi
        done <<< "$deps"
      else
        echo "No dependencies found with MINGW_PREFIX filter, trying broader search..."
        # Try broader search for mingw dependencies
        deps=$(ntldd -R *.dll *.exe 2>/dev/null | grep -v WINDOWS | grep -v "not found" | grep -v System32 | grep "\.dll" | awk '{print $3}' | grep -E "^(/clang64|/mingw64)" | sort | uniq)

        if [[ -n "$deps" ]]; then
          echo "Found dependencies with broader search:"
          echo "$deps"

          while IFS= read -r dep; do
            if [[ -f "$dep" ]]; then
              echo "Copying: $dep"
              cp -u "$dep" . || echo "Failed to copy $dep"
            else
              echo "Dependency not found: $dep"
            fi
          done <<< "$deps"
        else
          echo "No dependencies found by ntldd"
        fi
      fi
    else
      echo "ntldd command not found - using ldd as fallback"
    fi

    # Always run ldd as additional check
    echo "=== Running ldd for additional dependency detection ==="
    for file in ffmpeg.exe ffplay.exe ffprobe.exe *.dll; do
      if [[ -f "$file" ]]; then
        echo "Checking dependencies for $file with ldd:"
        ldd_output=$(ldd "$file" 2>/dev/null)
        echo "$ldd_output" | head -10

        # Extract mingw dependencies
        mingw_deps=$(echo "$ldd_output" | grep -E "\.dll.*=>" | grep -E "(clang64|mingw64)" | awk '{print $3}' | sort | uniq)

        if [[ -n "$mingw_deps" ]]; then
          echo "Found mingw dependencies for $file:"
          echo "$mingw_deps"

          while IFS= read -r dep; do
            basename_dep=$(basename "$dep")
            if [[ -f "$dep" ]] && [[ ! -f "$basename_dep" ]]; then
              echo "Copying: $dep -> $basename_dep"
              cp -u "$dep" . || echo "Failed to copy $dep"
            elif [[ -f "$basename_dep" ]]; then
              echo "Already exists: $basename_dep"
            else
              echo "Not found: $dep"
            fi
          done <<< "$mingw_deps"
        else
          echo "No mingw dependencies found for $file"
        fi
        echo "---"
      fi
    done

    echo "Final contents of bin directory:"
    ls -la
    popd
  fi
}
